import { useState } from 'react';
import axios from 'axios'
import './App.css';

function App() {

  const [isProductModalOpen, setIsProductModalOpen] = useState(false)
  const [isDataModalOpen, setIsDataModalOpen] = useState(false)
  const [isInfo, setIsInfo] = useState(true)
  const [isOpenAddProductModal, setIsOpenAddProductMdal] = useState(false)
  const [afterSaveProduct, setAfterSaveProduct] = useState(false)

  const [fetchedData, setFetchData] = useState([]);
  const [editMode, setEditMode] = useState({});

  const [userPersonalDetails, setUserPersonalDetails] = useState({ username: '', userdiscription: '', usercountry: '', userstate: '', userpincode: '' })

  const [userProductInput, setUserProductInput] = useState({ serialNumber: '', productName: '', Price: '', quantity: '' })
  const [userPeroductDataList, setUserProductDataList] = useState([])

  const [isEditing, setIsEditing] = useState(null);

  const [productInputLabels, setProductInputLabels] = useState(false)
  console.log('userPeroductDataList', userPeroductDataList)

  //GET VALUE OF USER PERSONAL INPUT
  function handleUserInput(e) {
    const { name, value } = e.target
    setUserPersonalDetails((usersdata) => ({
      ...usersdata,
      [name]: value
    }))
  }

  // CALL SUBMIT BUTTON TO SEND ALL DATA INTO BACKEND
  async function submitdata() {
    setProductInputLabels(false)
    setIsProductModalOpen(false)
    setIsOpenAddProductMdal(false)
    setProductInputLabels(false)
    try {

      const dataToSend = {
        userPersonalDetails: userPersonalDetails,
        userPeroductDataList: userPeroductDataList,
      };

      const response = await axios.post('http://localhost:3001/Data-inserted',
        dataToSend,
        {
          headers: {
            'content-type': 'application/json'
          },
        }
      )
      console.log(response)
    } catch (err) {
      console.log(err)
    }
    setUserProductDataList([])
  }


  const toggleEditMode = (index) => {
    setEditMode((prevState) => ({
      ...prevState,
      [index]: !prevState[index],
    }));
  };

  //
  const handleInputChange = (index, fieldName, value) => {
    const updatedData = [...fetchedData];
    updatedData[index][fieldName] = value;
    setFetchData(updatedData);
  };

  //DELETE NOTES FUNCTION
  const deleteItem = (index) => {
    const updatedData = [...fetchedData];
    updatedData.splice(index, 1);
    setFetchData(updatedData);
  };

  // TO CANCEL FUNCTION
  const cancelEdit = (index) => {
    toggleEditMode(index);
    // console.log(index)
  }

  //SAVE CHANGES FUNCTION
  const saveChanges = (index) => {
    toggleEditMode(index);
  }


  //ADD PRODUCT FUCNTION
  function addProduct() {
    setIsProductModalOpen(true)
    setIsOpenAddProductMdal(true)
    setProductInputLabels(true)
  }


  const handleChange = (e) => {
    const { name, value } = e.target
    setUserProductInput((prevData) => ({
      ...prevData,
      [name]: value
    }))
  }

  //SAVE PRODUCT INFO AFTER EDIT
  function saveProduct(e) {
    e.preventDefault()
    setIsEditing(null)
    setIsOpenAddProductMdal(false)
    setAfterSaveProduct(true)
    const newData = { ...userProductInput }
    setUserProductDataList((prevList) => [...prevList, newData])
    setUserProductInput({ serialNumber: '', productName: '', Price: '', quantity: '' })
  }

  //ADD PRODUCT MODAL
  const AddProductModal = () => {
    return (
      <div>
        <table>
          <tr>
            <th>

            </th>
          </tr>
          <tr>
            <td>
              <div style={{ display: "flex" }}>
                <div className='addproductInput'>
                  <input name='serialNumber' value={userProductInput.serialNumber} className='productInput' type="number" placeholder='Serial Number' onChange={handleChange}  ></input>
                  <input name='productName' value={userProductInput.productName} className='productInput' type="text" placeholder='Product Name' onChange={handleChange} ></input>
                  <input name='Price' value={userProductInput.Price} className='productInput' type="number" placeholder='Price' onChange={handleChange}></input>
                  <input name='quantity' value={userProductInput.quantity} className='productInput' type="number" placeholder='Quantity' onChange={handleChange}></input>
                  <button onClick={saveProduct}>Save</button>
                </div>
              </div >
            </td>
          </tr>
        </table>
      </div>

    )
  }


  //EDIT PRODUCT INPUT AFTER SAVE
  function handleEdit(index) {
    setIsEditing(index);
    console.log('isEditing', isEditing)
    setUserProductInput(userPeroductDataList[index]);
  }

  //DELETE AFTER EDIT
  function handleDelete(index) {
    const updatedUserPeroductDataList = [...userPeroductDataList]
    updatedUserPeroductDataList.splice(index, 1);
    setUserProductDataList(updatedUserPeroductDataList);
  }

  //PRODUCT MODEL
  const Productmodal = () => {
    return (
      <div>
        <form>
          <div className='fetchedDataSection'>
            <div>
              {isOpenAddProductModal && <AddProductModal />}
            </div>
          </div>
        </form>

        {userPeroductDataList.map((Value, Index) => {
          return (
            isEditing === Index ? (

              <div style={{ display: "flex" }}>
                <div className='addproductInput'>
                  <input name='serialNumber' value={userProductInput.serialNumber} className='productInput' type="number" placeholder='Serial Number' onChange={handleChange}></input>
                  <input name='productName' value={userProductInput.productName} className='productInput' type="text" placeholder='Product Name' onChange={handleChange}></input>
                  <input name='Price' value={userProductInput.Price} className='productInput' type="number" placeholder='Price' onChange={handleChange}></input>
                  <input name='quantity' value={userProductInput.quantity} className='productInput' type="number" placeholder='Quantity' onChange={handleChange}></input>
                  <button onClick={saveProduct}>Save</button>
                </div>
              </div>

            )
              :
              (
                afterSaveProduct && (
                  <div style={{ display: 'flex' }}>
                    <div key={Index} className='savedProductData'>
                      <p>{Value.serialNumber}</p>
                      <p>{Value.productName}</p>
                      <p>{Value.Price}</p>
                      <p>{Value.quantity}</p>
                    </div>
                    <div style={{ display: 'flex' }}>
                      <button onClick={() => handleEdit(Index)}>Edit</button>
                      <button onClick={() => handleDelete(Index)}>Delete</button>
                    </div>
                  </div>
                )
              )
          );
        })}
      </div>
    );
  };



  //USER DATA FETCHED FUNCTION
  async function checkData() {
    setIsInfo(false)
    setIsDataModalOpen(true)
    try {

      const response = await axios.get('http://localhost:3001/Fetch-Data',)
      setFetchData(response.data)

    } catch (err) {
      console.log(err)
    }
  }

  //FETCHED USER DATA MODEL
  // const Datamodal = () => {
  //   return (
  //     <div>
  //       {(isInfo === true) ?
  //         // IF NO DATA LABEL
  //         <div>
  //           <p>No Data Found</p>
  //         </div>
  //         :
  //         // FETCHED DATA LABEL
  //         <div className='dataContainer'>
  //           <table>
  //             <tr>
  //               {/* DATA HEADER */}
  //               <th>
  //                 <div className='label'>
  //                   <p>Name</p>
  //                   <p>Discription</p>
  //                   <p>Country</p>
  //                   <p>State</p>
  //                   <p>Pin Code</p>
  //                   <p>Serial Number</p>
  //                   <p>Product Name</p>
  //                   <p>Price</p>
  //                   <p>Quantity</p>
  //                 </div>
  //               </th>
  //             </tr>
  //             <tr>
  //               <td>
  //                 {/* USER FETCHED dATA */}
  //                 {fetchedData.length && fetchedData.map((data, index) => {
  //                   return (
  //                     <div key={index} className='userData'>
  //                       {(editMode[index]) ?

  //                         <div className='fetcheduserdata'>
  //                           <tr>

  //                             <div style={{ display: 'flex', height: '20px' }}>
  //                               <input value={data.userName} className='fetchedDataInput' onChange={(e) => handleInputChange(index, 'userName', e.target.value)}></input>
  //                               <input value={data.userDiscription} className='fetchedDataInput'></input>
  //                               <input value={data.userCountry} className='fetchedDataInput'></input>
  //                               <input value={data.userState} className='fetchedDataInput'></input>
  //                               <input value={data.userPincode} className='fetchedDataInput'></input>
  //                               <input value={data.serialNumber} className='fetchedDataInput'></input>
  //                               <input value={data.productName} className='fetchedDataInput'></input>
  //                               <input value={data.price} className='fetchedDataInput'></input>
  //                               <input value={data.quantity} className='fetchedDataInput'></input>
  //                             </div>
  //                             <div>

  //                               <button onClick={() => saveChanges(index)}>Save</button>
  //                               <button onClick={() => cancelEdit(index)}>Cancel</button>

  //                             </div>
  //                           </tr>
  //                         </div>
  //                         :
  //                         (
  //                           <div style={{ display: 'flex' }}>
  //                             <div style={{ display: 'flex' }}>
  //                               <p className='fetchedDataInputLabel' >{data.userName}</p>
  //                               <p className='fetchedDataInputLabel'>{data.userDiscription}</p>
  //                               <p className='fetchedDataInputLabel'>{data.userCountry}</p>
  //                               <p className='fetchedDataInputLabel'>{data.userState}</p>
  //                               <p className='fetchedDataInputLabel'>{data.userPincode}</p>
  //                               <p className='fetchedDataInputLabel'>{data.serialNumber}</p>
  //                               <p className='fetchedDataInputLabel'>{data.productName}</p>
  //                               <p className='fetchedDataInputLabel'>{data.price}</p>
  //                               <p className='fetchedDataInputLabel'>{data.quantity} </p>
  //                             </div>
  //                             <div>
  //                               {/* <button>Save</button> */}
  //                               <button onClick={() => toggleEditMode(index)}>Edit</button>
  //                               <button onClick={() => deleteItem(index)}>Delete</button>
  //                             </div>
  //                           </div>
  //                         )
  //                       }
  //                     </div>
  //                   );
  //                 })}


  //               </td>
  //             </tr>
  //           </table>

  //         </div>
  //       }
  //     </div >)
  // }


  return (
    <div className="container">
      <div className='main' >
        <form>
          <div className='userInputSection'>
            <div className='userinput'>
              <label>Name</label>
              <input name='username' placeholder='Name' onChange={handleUserInput}></input>
            </div>
            <div className='userinput'>
              <label>Discription</label>
              <input name='userdiscription' placeholder='Discription' onChange={handleUserInput}></input>

            </div>
            <div className='userinput'>
              <label>Country</label>
              <input name='usercountry' placeholder='Country' onChange={handleUserInput} ></input>
            </div>
            <div className='userinput'>
              <label>State</label>
              <input name='userstate' placeholder='State' onChange={handleUserInput}></input>
            </div>
            <div className='userinput'>
              <label>Pin Code</label>
              <input name='userpincode' placeholder='Pin Code' onChange={handleUserInput}></input>
            </div>
          </div>
        </form>

        <div >
          <div>

            {/* PRODUCT ADD BUTTON */}
            <button onClick={addProduct} className='productBtn'>Add Product+</button>
          </div>

          {productInputLabels &&
            <div className='productLabel' >
              <p>S.no</p>
              <p>Product Name</p>
              <p>Price</p>
              <p>Qt.</p>
              <p>Status</p>
            </div>
          }

          {/* ADD PRODUCT MODAL SECTION */}
          {isProductModalOpen &&
            <Productmodal />
          }
        </div>

      </div>


      <div className='submitBtn'>
        {/* FORM SUBMIT BUTTON */}
        <button onClick={submitdata}>Submit</button>
      </div>



      {/* FETCH DATA BUTTON */}
      <button onClick={checkData} className='viewDatabtn'>View Data</button>

      {/* {isDataModalOpen &&
        <Datamodal />
      } */}

    </div>
  );
}

export default App;

